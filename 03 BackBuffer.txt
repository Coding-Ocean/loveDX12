===============================================================================================
WinMain.h

☆インクルード
#pragma comment(lib,"dxgi.lib")
#include<dxgi1_6.h>
#include<cmath>
void WaitDrawDone();

☆インターフェイス
//リソース----------------------------------------------------------------------
//バックバッファ
IDXGISwapChain4* SwapChain;
ID3D12Resource* BackBufs[2];
UINT BackBufIdx;
ID3D12DescriptorHeap* BbvHeap;//"Bbv"は"BackBufView"の略
UINT BbvHeapSize;


===============================================================================================
WinMain.cpp

☆デバイスの下に追加
	//リソース		
	{
		//スワップチェインをつくる(ここにバックバッファが含まれている)
		{
			//DXGIファクトリをつくる
			IDXGIFactory4* dxgiFactory;
			Hr = CreateDXGIFactory2(0, IID_PPV_ARGS(&dxgiFactory));
			assert(SUCCEEDED(Hr));

			//スワップチェインをつくる
			DXGI_SWAP_CHAIN_DESC1 desc = {};
			desc.BufferCount = 2; //バックバッファ2枚
			desc.Width = ClientWidth;
			desc.Height = ClientHeight;
			desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
			desc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
			desc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD;
			desc.SampleDesc.Count = 1;
			IDXGISwapChain1* swapChain1;
			Hr = dxgiFactory->CreateSwapChainForHwnd(
				CommandQueue, HWnd, &desc, nullptr, nullptr, &swapChain1);
			assert(SUCCEEDED(Hr));

			//IDXGISwapChain4インターフェイスをサポートしているか尋ねる
			Hr = swapChain1->QueryInterface(IID_PPV_ARGS(&SwapChain));
			assert(SUCCEEDED(Hr));

			swapChain1->Release();
			dxgiFactory->Release();
		}
		//バックバッファ「ビュー」の入れ物である「ディスクリプタヒープ」をつくる
		{
			D3D12_DESCRIPTOR_HEAP_DESC desc = {};
			desc.NumDescriptors = 2;//バックバッファビュー２つ
			desc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV;//バックバッファビューのディスクリプタヒープとして使う
			desc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE;//シェーダからアクセスしないのでNONEでOK
			Hr = Device->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&BbvHeap));
			assert(SUCCEEDED(Hr));
		}
		//バックバッファ「ビュー」を「ディスクリプタヒープ」につくる
		{
			//ポインタ(ここではハンドル)にディスクリプタヒープの先頭アドレスを取得しておく
			D3D12_CPU_DESCRIPTOR_HANDLE hBbvHeap
				= BbvHeap->GetCPUDescriptorHandleForHeapStart();
			//ディスクリプタのサイズを取得する（アドレスをずらしてディスクリプタを指すために使う）
			BbvHeapSize
				= Device->GetDescriptorHandleIncrementSize(
					D3D12_DESCRIPTOR_HEAP_TYPE_RTV);
			//ポインタ(ハンドル)をずらしながら、ビューをディスクリプタヒープにつくる
			for (UINT idx = 0; idx < 2; idx++) {
				//バックバッファを取り出す
				Hr = SwapChain->GetBuffer(idx, IID_PPV_ARGS(&BackBufs[idx]));
				assert(SUCCEEDED(Hr));
				//バックバッファのビューをディスクリプタヒープにつくる
				hBbvHeap.ptr += idx * BbvHeapSize;
				Device->CreateRenderTargetView(BackBufs[idx], nullptr, hBbvHeap);
			}
		}
	}


☆メインループ
		//バックバッファをクリア
		{
			//現在のバックバッファのインデックスを取得。このプログラムの場合0 or 1になる。
			BackBufIdx = SwapChain->GetCurrentBackBufferIndex();

			//バリアでバックバッファを描画ターゲットに切り替える
			D3D12_RESOURCE_BARRIER barrier;
			barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;//このバリアは状態遷移タイプ
			barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
			barrier.Transition.pResource = BackBufs[BackBufIdx];//リソースはバックバッファ
			barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT;//遷移前はPresent
			barrier.Transition.StateAfter = D3D12_RESOURCE_STATE_RENDER_TARGET;//遷移後は描画ターゲット
			barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;
			CommandList->ResourceBarrier(1, &barrier);

			//バックバッファの場所を指すディスクリプタヒープハンドルを用意する
			auto hBbvHeap = BbvHeap->GetCPUDescriptorHandleForHeapStart();
			hBbvHeap.ptr += BackBufIdx * BbvHeapSize;
			//バックバッファを描画ターゲットとして設定する
			CommandList->OMSetRenderTargets(1, &hBbvHeap, false, nullptr);
			//描画ターゲットをクリアする
			static float radian = 0.0f;
			float r = cos(radian) * 0.5f + 0.5f;
			float g = 0.25f;
			float b = 0.5f;
			const float clearColor[] = { r, g, b, 1.0f };
			radian += 0.01f;
			CommandList->ClearRenderTargetView(hBbvHeap, clearColor, 0, nullptr);
		}

		//バックバッファを表示
		{
			//バリアでバックバッファを表示用に切り替える
			D3D12_RESOURCE_BARRIER barrier;
			barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;//このバリアは状態遷移タイプ
			barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
			barrier.Transition.pResource = BackBufs[BackBufIdx];//リソースはバックバッファ
			barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;//遷移前は描画ターゲット
			barrier.Transition.StateAfter = D3D12_RESOURCE_STATE_PRESENT;//遷移後はPresent
			barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;
			CommandList->ResourceBarrier(1, &barrier);

			//コマンドリストをクローズする
			CommandList->Close();
			//コマンドリストを実行する
			ID3D12CommandList* commandLists[] = { CommandList };
			CommandQueue->ExecuteCommandLists(_countof(commandLists), commandLists);
			//描画完了を待つ
			WaitDrawDone();

			//バックバッファを表示
			SwapChain->Present(1, 0);
			
			//コマンドアロケータをリセット
			Hr = CommandAllocator->Reset();
			assert(SUCCEEDED(Hr));
			//コマンドリストをリセット
			Hr = CommandList->Reset(CommandAllocator, nullptr);
			assert(SUCCEEDED(Hr));
		}


☆解放
		WaitDrawDone();

		BbvHeap->Release();
		BackBufs[0]->Release();
		BackBufs[1]->Release();
		SwapChain->Release();


☆関数を追加
// 描画完了を待つ
void WaitDrawDone()
{
	//fvalueがコマンド終了後にFenceに書き込まれるようにする
	UINT64 fvalue = FenceValue;
	CommandQueue->Signal(Fence, fvalue);
	FenceValue++;

	//まだコマンドキューが終了していないことを確認する
	if (Fence->GetCompletedValue() < fvalue)
	{
		//Fenceがfvalueの値になったら終了を通知するイベントを発生させる
		Fence->SetEventOnCompletion(fvalue, FenceEvent);
		//終了通知イベントが発生するまで待つ
		WaitForSingleObject(FenceEvent, INFINITE);
	}
}

