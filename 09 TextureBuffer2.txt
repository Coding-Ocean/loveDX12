今回することは２つ
①２つのモデルを表示する方法の基本
②テクスチャバッファ・もう一つのつくり方


☆ヘッダの変更
・コンスタントバッファ１構造体をコンスタントバッファ０構造体の下まで持ってくる
//コンスタントバッファ０構造体
struct CONST_BUF0 {
    XMMATRIX mat;
};
//コンスタントバッファ１構造体
struct CONST_BUF1 {
    XMFLOAT4 diffuse;
};

・２つのモデルを表示するには、以下の記述が２セット必要。（コンスタントバッファは使いまわしできない！）
//メッシュ_a------------------------
CONST_BUF0* MappedConstBuf0_a;
CONST_BUF1* MappedConstBuf1_a;
ID3D12Resource* ConstBuf0_a;
ID3D12Resource* ConstBuf1_a;
ID3D12Resource* TextureBuf_a;
ID3D12DescriptorHeap* CbvTbvHeap_a;

//メッシュ_b------------------------
CONST_BUF0* MappedConstBuf0_b;
CONST_BUF1* MappedConstBuf1_b;
ID3D12Resource* ConstBuf0_b;
ID3D12Resource* ConstBuf1_b;
ID3D12Resource* TextureBuf_b;
ID3D12DescriptorHeap* CbvTbvHeap_b;


☆リソースの変更
		//コンスタントバッファ_aとテクスチャバッファ_a ⇒ ディスクリプタヒープ_a
		{
			//コンスタントバッファ０_aをつくる
			{
				D3D12_HEAP_PROPERTIES prop = {};
				prop.Type = D3D12_HEAP_TYPE_UPLOAD;
				prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
				prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
				prop.CreationNodeMask = 1;
				prop.VisibleNodeMask = 1;
				D3D12_RESOURCE_DESC desc = {};
				desc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
				desc.Alignment = 0;
				desc.Width = 256;
				desc.Height = 1;
				desc.DepthOrArraySize = 1;
				desc.MipLevels = 1;
				desc.Format = DXGI_FORMAT_UNKNOWN;
				desc.SampleDesc.Count = 1;
				desc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
				desc.Flags = D3D12_RESOURCE_FLAG_NONE;
				Hr = Device->CreateCommittedResource(
					&prop,
					D3D12_HEAP_FLAG_NONE,
					&desc,
					D3D12_RESOURCE_STATE_GENERIC_READ,
					nullptr,
					IID_PPV_ARGS(&ConstBuf0_a)
				);
				assert(SUCCEEDED(Hr));

				//マップしておいて、メインループ中で更新する。
				Hr = ConstBuf0_a->Map(0, nullptr, (void**)&MappedConstBuf0_a);
				assert(SUCCEEDED(Hr));
			}
			//コンスタントバッファ１_aをつくる
			{
				D3D12_HEAP_PROPERTIES prop = {};
				prop.Type = D3D12_HEAP_TYPE_UPLOAD;
				prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
				prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
				prop.CreationNodeMask = 1;
				prop.VisibleNodeMask = 1;
				D3D12_RESOURCE_DESC desc = {};
				desc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
				desc.Alignment = 0;
				desc.Width = 256;
				desc.Height = 1;
				desc.DepthOrArraySize = 1;
				desc.MipLevels = 1;
				desc.Format = DXGI_FORMAT_UNKNOWN;
				desc.SampleDesc.Count = 1;
				desc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
				desc.Flags = D3D12_RESOURCE_FLAG_NONE;
				Hr = Device->CreateCommittedResource(
					&prop,
					D3D12_HEAP_FLAG_NONE,
					&desc,
					D3D12_RESOURCE_STATE_GENERIC_READ,
					nullptr,
					IID_PPV_ARGS(&ConstBuf1_a)
				);
				assert(SUCCEEDED(Hr));

				//マップしておいて、メインループ中で更新する。
				Hr = ConstBuf1_a->Map(0, nullptr, (void**)&MappedConstBuf1_a);
				assert(SUCCEEDED(Hr));
			}
			//テクスチャバッファ_aをつくる(Unified Memory Accessバージョン)
			{
				//ファイルを読み込み、画像データを取り出す
				unsigned char* pixels = nullptr;
				int width=0, height=0, bytePerPixel=4;
				pixels = stbi_load("assets\\penguin1.png", &width, &height, nullptr, bytePerPixel);
				assert(pixels != nullptr);

				//テクスチャバッファ
				D3D12_HEAP_PROPERTIES prop = {};
				prop.Type = D3D12_HEAP_TYPE_CUSTOM;//特殊な設定。defaultでもuploadでもなく
				prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_WRITE_BACK;//ライトバックで
				prop.MemoryPoolPreference = D3D12_MEMORY_POOL_L0;//転送がL0つまりCPU側から直で
				prop.CreationNodeMask = 1;
				prop.VisibleNodeMask = 1;
				D3D12_RESOURCE_DESC desc = {};
				desc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE2D;//2Dテクスチャ用
				desc.Alignment = 0;
				desc.Width = width;
				desc.Height = height;
				desc.DepthOrArraySize = 1;
				desc.MipLevels = 1;
				desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;//RGBAフォーマット
				desc.SampleDesc.Count = 1;//通常テクスチャなのでアンチェリしない
				desc.Layout = D3D12_TEXTURE_LAYOUT_UNKNOWN;
				desc.Flags = D3D12_RESOURCE_FLAG_NONE;
				Hr = Device->CreateCommittedResource(
					&prop,
					D3D12_HEAP_FLAG_NONE,//特に指定なし
					&desc,
					D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,//テクスチャ用(ピクセルシェーダから見る用)
					nullptr,
					IID_PPV_ARGS(&TextureBuf_a)
				);
				assert(SUCCEEDED(Hr));

				//テクスチャバッファに生データをコピー
				Hr = TextureBuf_a->WriteToSubresource(0,
					nullptr, // 全領域へコピー 
					pixels, // 元データアドレス 
					width * bytePerPixel, // 1ラインサイズ 
					width * height * bytePerPixel // 全サイズ
				);

				//生データ開放
				stbi_image_free(pixels);
			}
			//ディスクリプタヒープ_aを用意し、そこに３つのビューをつくる
			{
				//「ビュー」の入れ物である「ディスクリプタヒープ_a」をつくる
				{
					D3D12_DESCRIPTOR_HEAP_DESC desc = {};
					desc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
					desc.NumDescriptors = 3;//コンスタントバッファビュー２つとテクスチャバッファビュー１つ
					desc.NodeMask = 0;
					desc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;
					Hr = Device->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&CbvTbvHeap_a));
					assert(SUCCEEDED(Hr));
				}

				auto hCbvTbvHeap_a = CbvTbvHeap_a->GetCPUDescriptorHandleForHeapStart();
				auto heapSize = Device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);

				//コンスタントバッファ０_aの「ビュー」を「ディスクリプタヒープ_a」につくる
				{
					D3D12_CONSTANT_BUFFER_VIEW_DESC desc = {};
					desc.BufferLocation = ConstBuf0_a->GetGPUVirtualAddress();
					desc.SizeInBytes = static_cast<UINT>(ConstBuf0_a->GetDesc().Width);
					Device->CreateConstantBufferView(&desc, hCbvTbvHeap_a);
				}

				hCbvTbvHeap_a.ptr += heapSize;

				//コンスタントバッファ１_aの「ビュー」を「ディスクリプタヒープ_a」につくる
				{
					D3D12_CONSTANT_BUFFER_VIEW_DESC desc = {};
					desc.BufferLocation = ConstBuf1_a->GetGPUVirtualAddress();
					desc.SizeInBytes = static_cast<UINT>(ConstBuf1_a->GetDesc().Width);
					Device->CreateConstantBufferView(&desc, hCbvTbvHeap_a);
				}

				hCbvTbvHeap_a.ptr += heapSize;
				
				//テクスチャバッファ_aの「ビュー」を「ディスクリプタヒープ_a」につくる
				{
					D3D12_SHADER_RESOURCE_VIEW_DESC desc = {};
					desc.Format = TextureBuf_a->GetDesc().Format;
					desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
					desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;//2Dテクスチャ
					desc.Texture2D.MipLevels = 1;//ミップマップは使用しないので1
					Device->CreateShaderResourceView(TextureBuf_a, &desc, hCbvTbvHeap_a);
				}
			}
		}{}
		//コンスタントバッファ_bとテクスチャバッファ_b ⇒ ディスクリプタヒープ_b
		{
			//コンスタントバッファ０_bをつくる
			{
				D3D12_HEAP_PROPERTIES prop = {};
				prop.Type = D3D12_HEAP_TYPE_UPLOAD;
				prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
				prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
				prop.CreationNodeMask = 1;
				prop.VisibleNodeMask = 1;
				D3D12_RESOURCE_DESC desc = {};
				desc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
				desc.Alignment = 0;
				desc.Width = 256;
				desc.Height = 1;
				desc.DepthOrArraySize = 1;
				desc.MipLevels = 1;
				desc.Format = DXGI_FORMAT_UNKNOWN;
				desc.SampleDesc.Count = 1;
				desc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
				desc.Flags = D3D12_RESOURCE_FLAG_NONE;
				Hr = Device->CreateCommittedResource(
					&prop,
					D3D12_HEAP_FLAG_NONE,
					&desc,
					D3D12_RESOURCE_STATE_GENERIC_READ,
					nullptr,
					IID_PPV_ARGS(&ConstBuf0_b));
				assert(SUCCEEDED(Hr));

				//マップしておいて、メインループ中で更新する。
				Hr = ConstBuf0_b->Map(0, nullptr, (void**)&MappedConstBuf0_b);
				assert(SUCCEEDED(Hr));
			}
			//コンスタントバッファ１_bをつくる
			{
				D3D12_HEAP_PROPERTIES prop = {};
				prop.Type = D3D12_HEAP_TYPE_UPLOAD;
				prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
				prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
				prop.CreationNodeMask = 1;
				prop.VisibleNodeMask = 1;
				D3D12_RESOURCE_DESC desc = {};
				desc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
				desc.Alignment = 0;
				desc.Width = 256;
				desc.Height = 1;
				desc.DepthOrArraySize = 1;
				desc.MipLevels = 1;
				desc.Format = DXGI_FORMAT_UNKNOWN;
				desc.SampleDesc.Count = 1;
				desc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
				desc.Flags = D3D12_RESOURCE_FLAG_NONE;
				Hr = Device->CreateCommittedResource(
					&prop,
					D3D12_HEAP_FLAG_NONE,
					&desc,
					D3D12_RESOURCE_STATE_GENERIC_READ,
					nullptr,
					IID_PPV_ARGS(&ConstBuf1_b));
				assert(SUCCEEDED(Hr));

				//マップしておいて、メインループ中で更新する。
				Hr = ConstBuf1_b->Map(0, nullptr, (void**)&MappedConstBuf1_b);
				assert(SUCCEEDED(Hr));
			}
			//テクスチャバッファ_bをつくる(Microsoft推奨 Direct Memory Accessバージョン)
			{
				//ファイルを読み込み、生データを取り出す
				unsigned char* pixels = nullptr;
				int width=0, height=0, bytePerPixel=4;
				pixels = stbi_load("assets\\penguin2.png", &width, &height, nullptr, bytePerPixel);
				assert(pixels != nullptr);

				//１行のピッチを256の倍数にしておく(バッファサイズは256の倍数でなければいけない)
				const UINT64 alignedRowPitch = (width * bytePerPixel + 0xff) & ~0xff;

				//アップロード用中間バッファをつくり、生データをコピーしておく
				ID3D12Resource* uploadBuf;
				{
					//テクスチャではなくフツーのバッファとしてつくる
					D3D12_HEAP_PROPERTIES prop = {};
					prop.Type = D3D12_HEAP_TYPE_UPLOAD;
					prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
					prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
					prop.CreationNodeMask = 1;
					prop.VisibleNodeMask = 1;
					D3D12_RESOURCE_DESC desc = {};
					desc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
					desc.Alignment = 0;
					desc.Width = alignedRowPitch * height;
					desc.Height = 1;
					desc.DepthOrArraySize = 1;
					desc.MipLevels = 1;
					desc.Format = DXGI_FORMAT_UNKNOWN;
					desc.SampleDesc.Count = 1;//通常テクスチャなのでアンチェリしない
					desc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
					desc.Flags = D3D12_RESOURCE_FLAG_NONE;
					Hr = Device->CreateCommittedResource(
						&prop,
						D3D12_HEAP_FLAG_NONE,
						&desc,
						D3D12_RESOURCE_STATE_GENERIC_READ,
						nullptr,
						IID_PPV_ARGS(&uploadBuf));
					assert(SUCCEEDED(Hr));

					//生データをuploadbuffに一旦コピーします
					uint8_t* mapBuf = nullptr;
					Hr = uploadBuf->Map(0, nullptr, (void**)&mapBuf);//マップ
					auto srcAddress = pixels;
					auto originalRowPitch = width * bytePerPixel;
					for (int y = 0; y < height; ++y) {
						memcpy(mapBuf, srcAddress, originalRowPitch);
						//1行ごとの辻褄を合わせてやる
						srcAddress += originalRowPitch;
						mapBuf += alignedRowPitch;
					}
					uploadBuf->Unmap(0, nullptr);//アンマップ
				}

				//そして、最終コピー先であるテクスチャバッファ_bを作る
				{
					D3D12_HEAP_PROPERTIES prop = {};
					prop.Type = D3D12_HEAP_TYPE_DEFAULT;
					prop.CPUPageProperty = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
					prop.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
					prop.CreationNodeMask = 1;
					prop.VisibleNodeMask = 1;
					D3D12_RESOURCE_DESC desc = {};
					desc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE2D;
					desc.Alignment = 0;
					desc.Width = width;
					desc.Height = height;
					desc.DepthOrArraySize = 1;
					desc.MipLevels = 1;
					desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
					desc.SampleDesc.Count = 1;
					desc.Layout = D3D12_TEXTURE_LAYOUT_UNKNOWN;
					desc.Flags = D3D12_RESOURCE_FLAG_NONE;
					Hr = Device->CreateCommittedResource(
						&prop,
						D3D12_HEAP_FLAG_NONE,
						&desc,
						D3D12_RESOURCE_STATE_COPY_DEST,
						nullptr,
						IID_PPV_ARGS(&TextureBuf_b));
					assert(SUCCEEDED(Hr));
				}

				//uploadBufからtextureBufへコピーする長い道のりが始まります
				
				//まずコピー元ロケーションの準備・フットプリント指定
				D3D12_TEXTURE_COPY_LOCATION src = {};
				src.pResource = uploadBuf;
				src.Type = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT;
				src.PlacedFootprint.Footprint.Width = static_cast<UINT>(width);
				src.PlacedFootprint.Footprint.Height = static_cast<UINT>(height);
				src.PlacedFootprint.Footprint.Depth = static_cast<UINT>(1);
				src.PlacedFootprint.Footprint.RowPitch = static_cast<UINT>(alignedRowPitch);
				src.PlacedFootprint.Footprint.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
				//コピー先ロケーションの準備・サブリソースインデックス指定
				D3D12_TEXTURE_COPY_LOCATION dst = {};
				dst.pResource = TextureBuf_b;
				dst.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;
				dst.SubresourceIndex = 0;

				//コマンドリストでコピーを予約しますよ！！！
				CommandList->CopyTextureRegion(&dst, 0, 0, 0, &src, nullptr);
				//コピー先からテクスチャリソースに切り替える
				D3D12_RESOURCE_BARRIER barrier = {};
				barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;
				barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
				barrier.Transition.pResource = TextureBuf_b;
				barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;
				barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_COPY_DEST;
				barrier.Transition.StateAfter = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;
				CommandList->ResourceBarrier(1, &barrier);
				//uploadBufの内容を破棄する
				CommandList->DiscardResource(uploadBuf, nullptr);
				//コマンドリストを閉じて
				CommandList->Close();
				//実行
				ID3D12CommandList* commandLists[] = { CommandList };
				CommandQueue->ExecuteCommandLists(_countof(commandLists), commandLists);
				//リソースがGPUに転送されるまで待機する
				WaitDrawDone();

				//コマンドアロケータをリセット
				HRESULT Hr = CommandAllocator->Reset();
				assert(SUCCEEDED(Hr));
				//コマンドリストをリセット
				Hr = CommandList->Reset(CommandAllocator, nullptr);
				assert(SUCCEEDED(Hr));

				//開放
				uploadBuf->Release();
				stbi_image_free(pixels);
			}{}
			//ディスクリプタヒープ_bをつくり、そこに３つのビューをつくる
			{
				//「ビュー」の入れ物である「ディスクリプタヒープ_b」をつくる
				{
					D3D12_DESCRIPTOR_HEAP_DESC desc = {};
					desc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
					desc.NumDescriptors = 3;//コンスタントバッファビュー２つとテクスチャバッファビュー１つ
					desc.NodeMask = 0;
					desc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;
					Hr = Device->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&CbvTbvHeap_b));
					assert(SUCCEEDED(Hr));
				}

				auto hCbvTbvHeap_b = CbvTbvHeap_b->GetCPUDescriptorHandleForHeapStart();
				auto heapSize = Device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);

				//コンスタントバッファ０_bの「ビュー」を「ディスクリプタヒープ_b」につくる
				{
					D3D12_CONSTANT_BUFFER_VIEW_DESC desc = {};
					desc.BufferLocation = ConstBuf0_b->GetGPUVirtualAddress();
					desc.SizeInBytes = static_cast<UINT>(ConstBuf0_b->GetDesc().Width);
					Device->CreateConstantBufferView(&desc, hCbvTbvHeap_b);
				}

				hCbvTbvHeap_b.ptr += heapSize;

				//コンスタントバッファ１_bの「ビュー」を「ディスクリプタヒープ_b」につくる
				{
					D3D12_CONSTANT_BUFFER_VIEW_DESC desc = {};
					desc.BufferLocation = ConstBuf1_b->GetGPUVirtualAddress();
					desc.SizeInBytes = static_cast<UINT>(ConstBuf1_b->GetDesc().Width);
					Device->CreateConstantBufferView(&desc, hCbvTbvHeap_b);
				}

				hCbvTbvHeap_b.ptr += heapSize;

				//テクスチャバッファ_bの「ビュー」を「ディスクリプタヒープ_b」につくる
				{
					D3D12_SHADER_RESOURCE_VIEW_DESC desc = {};
					desc.Format = TextureBuf_b->GetDesc().Format;
					desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
					desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;//2Dテクスチャ
					desc.Texture2D.MipLevels = 1;//ミップマップは使用しないので1
					Device->CreateShaderResourceView(TextureBuf_b, &desc, hCbvTbvHeap_b);
				}
			}
		}


☆ループ中の変更

			//共有データ
			//　回転用ラジアン
			static float radian = 0;
			float radius = 0.4f;
			radian += 0.02f;
			//　ビューマトリックス
			XMVECTOR eye = { 0, 0, -2 }, focus = { 0, 0, 0 }, up = { 0, 1, 0 };
			XMMATRIX view = XMMatrixLookAtLH(eye, focus, up);
			//　プロジェクションマトリックス
			XMMATRIX proj = XMMatrixPerspectiveFovLH(XM_PIDIV4, Aspect, 1.0f, 10.0f);

			//メッシュ_aの更新
			{
			//　コンスタントバッファ０＿ａ更新
			XMMATRIX world = XMMatrixTranslation(-sin(radian) * radius, 0.0f, -cos(radian) * radius);
			MappedConstBuf0_a->mat = world * view * proj;
			//　コンスタントバッファ１＿ａ更新
			MappedConstBuf1_a->diffuse = { 1.0f,1.0f,1.0f,1.0f };
			}
			//メッシュ_bの更新
			{
			//　コンスタントバッファ０＿ｂ更新
			XMMATRIX world = XMMatrixTranslation(sin(radian) * radius, 0.0f, cos(radian) * radius);
			MappedConstBuf0_b->mat = world * view * proj;
			//　コンスタントバッファ１＿ｂ更新
			MappedConstBuf1_b->diffuse = { 1.0f,1.0f,1.0f,1.0f };
			}




			//メッシュ_aの描画
			{
				//ディスクリプタヒープ＿ａをGPUにセット。まだ、シェーダと紐づいていない。
				CommandList->SetDescriptorHeaps(1, &CbvTbvHeap_a);
				//ディスクリプタヒープ＿ａをディスクリプタテーブルにセット。シェーダと紐づく。
				auto hCbvTbvHeap_a = CbvTbvHeap_a->GetGPUDescriptorHandleForHeapStart();
				CommandList->SetGraphicsRootDescriptorTable(0, hCbvTbvHeap_a);
				//描画
				CommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);
			}
			//メッシュ_bの描画
			{
				//ディスクリプタヒープ＿ｂをGPUにセット。まだ、シェーダと紐づいていない。
				CommandList->SetDescriptorHeaps(1, &CbvTbvHeap_b);
				//ディスクリプタヒープ＿ｂをディスクリプタテーブルにセット。シェーダと紐づく。
				auto hCbvTbvHeap_b = CbvTbvHeap_b->GetGPUDescriptorHandleForHeapStart();
				CommandList->SetGraphicsRootDescriptorTable(0, hCbvTbvHeap_b);
				//描画
				CommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);
			}


☆解放の変更
		CbvTbvHeap_b->Release();
		TextureBuf_b->Release();
		ConstBuf1_b->Unmap(0, nullptr);
		ConstBuf1_b->Release();
		ConstBuf0_b->Unmap(0, nullptr);
		ConstBuf0_b->Release();

		CbvTbvHeap_a->Release();
		TextureBuf_a->Release();
		ConstBuf1_a->Unmap(0, nullptr);
		ConstBuf1_a->Release();
		ConstBuf0_a->Unmap(0, nullptr);
		ConstBuf0_a->Release();
